#include <ros/ros.h>
#include <visualization_msgs/Marker.h> 
#include <geometry_msgs/PointStamped.h>

// 红点回调函数，接收机器人位置并发布标记红点
void markerCallback(const geometry_msgs::PointStamped::ConstPtr& msg)
{
    // 创建标记红点对象
    visualization_msgs::Marker marker;
    // 设置标记红点的帧ID和时间戳
    marker.header.frame_id = "/odom";
    marker.header.stamp = ros::Time::now();
    // 设置标记红点的命名空间和ID
    marker.ns = "basic_shapes";
    marker.id = 0;
    // 设置标记红点的类型为球体
    marker.type = visualization_msgs::Marker::SPHERE;
    // 设置标记红点的操作为添加
    marker.action = visualization_msgs::Marker::ADD;
    // 设置标记红点的位置
    marker.pose.position.x = msg->point.x;
    marker.pose.position.y = msg->point.y;
    marker.pose.position.z = 0.0;
    // 设置标记红点的方向，此处默认沿x轴方向
    marker.pose.orientation.x = 0.0;
    marker.pose.orientation.y = 0.0;
    marker.pose.orientation.z = 0.0;
    marker.pose.orientation.w = 1.0;
    // 设置标记红点的大小
    marker.scale.x = 0.1;
    marker.scale.y = 0.1;
    marker.scale.z = 0.1;
    // 设置标记红点的颜色为红色
    marker.color.r = 1.0f;
    marker.color.g = 0.0f;
    marker.color.b = 0.0f;
    marker.color.a = 1.0f;
    // 设置标记红点的寿命为永久
    marker.lifetime = ros::Duration();

    // 创建标记红点的发布器
    static ros::Publisher marker_pub = msg->header.stamp.sec == 0 ? 
        ros::NodeHandle().advertise<visualization_msgs::Marker>("visualization_marker", 1) : marker_pub;
    // 发布标记红点
    marker_pub.publish(marker);       
}

int main(int argc, char** argv)
{
    ros::init(argc, argv, "marker_node");
    ros::NodeHandle nh;
    // 订阅程序一发布的机器人位置话题
    ros::Subscriber sub = nh.subscribe<geometry_msgs::PointStamped>("point_robot", 1, markerCallback);
    ros::spin();
    return 0;
}
