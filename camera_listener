// #include <ros/ros.h>
// #include <geometry_msgs/PointStamped.h>
// #include <iostream>
// #include <nav_msgs/Odometry.h>
// #include "tf2_ros/static_transform_broadcaster.h"
// #include "tf2/LinearMath/Quaternion.h"
// #include "tf2_ros/transform_listener.h"
// #include "tf2_ros/buffer.h"
// #include "tf2_geometry_msgs/tf2_geometry_msgs.h" //注意: 调用 transform 必须包含该头文件
// #include <ctime>
// #include <cstdlib>

// nav_msgs::Odometry odom_msg;

// void odomCallback(const nav_msgs::Odometry::ConstPtr& msg)
// {
//   //将订阅到的消息赋值给发布的消息
//   odom_msg.pose.pose.position.x = msg->pose.pose.position.x;
//   odom_msg.pose.pose.position.y = msg->pose.pose.position.y;
//   odom_msg.pose.pose.position.z = msg->pose.pose.position.z;
// }

// int main(int argc, char** argv)
// {
//   setlocale(LC_ALL,"");
//   ros::init(argc, argv, "camera_listener");
//   srand(time(NULL));
//   ros::NodeHandle node;
//   tf2_ros::Buffer tfBuffer;
//   tf2_ros::TransformListener tfListener(tfBuffer);

//   // 休眠一段时间，等待tf2数据缓存填充
//   ros::Duration(1.0).sleep();
  
//   ros::Rate loop_rate(1); 
//   while(ros::ok())
//   {
//     // 定义相机坐标系中的点
//     geometry_msgs::PointStamped point_cam;
//     point_cam.header.frame_id = "camera_link"; // 坐标系为相机坐标系
//     point_cam.header.stamp = ros::Time(0); // 获取最新的坐标变换
//     ros::Subscriber sub = node.subscribe<nav_msgs::Odometry>("/odom", 10, odomCallback);
//     ros::spinOnce();

//     point_cam.point.x = odom_msg.pose.pose.position.x;
//     point_cam.point.y = odom_msg.pose.pose.position.y;
//     point_cam.point.z = odom_msg.pose.pose.position.z;

//     // 进行坐标变换
//     geometry_msgs::PointStamped point_robot;
//     try 
//     {
//       geometry_msgs::TransformStamped transformStamped = tfBuffer.lookupTransform("base_link", "camera_link", ros::Time(0));
//       tf2::doTransform(point_cam, point_robot, transformStamped);
//     }
//     catch (tf2::TransformException& ex) 
//     {
//       ROS_WARN("Failed to transform point from camera frame to robot frame: %s", ex.what());
//       return 0;
//     }

//     // 输出转换后的点
//     ROS_INFO("Point in robot frame: (%.3f, %.3f, %.3f)", point_robot.point.x+rand()%5, point_robot.point.y+rand()%5, point_robot.point.z);
//     loop_rate.sleep();
//   }
//   return 0;
// }
#include <ros/ros.h>
#include <geometry_msgs/PointStamped.h>
#include <iostream>
#include <nav_msgs/Odometry.h>
#include "tf2_ros/static_transform_broadcaster.h"
#include "tf2/LinearMath/Quaternion.h"
#include "tf2_ros/transform_listener.h"
#include "tf2_ros/buffer.h"
#include "tf2_geometry_msgs/tf2_geometry_msgs.h"//注意: 调用 transform 必须包含该头文件
#include <ctime>
#include <cstdlib>
nav_msgs::Odometry odom_msg;
void odomCallback(const nav_msgs::Odometry::ConstPtr& msg)
{
  //将订阅到的消息赋值给发布的消息
  odom_msg = *msg;
}
int main(int argc, char** argv)
{
  setlocale(LC_ALL,"");
  ros::init(argc, argv, "camera_listener");
  srand(time(NULL));
  ros::NodeHandle node;
  tf2_ros::Buffer tfBuffer;
  tf2_ros::TransformListener tfListener(tfBuffer);
  ros::Publisher pub = node.advertise<geometry_msgs::PointStamped>("point_robot", 10);
  ros::Subscriber sub = node.subscribe<nav_msgs::Odometry>("/odom", 10, odomCallback);
// 等待一段时间，等待tf2数据缓存填充
  ros::Duration(1.0).sleep();
  ros::Rate loop_rate(1);
  while(ros::ok())
  {
// 定义相机坐标系中的点
    geometry_msgs::PointStamped point_cam;
    point_cam.header.frame_id = "camera_link";// 坐标系为相机坐标系
    point_cam.header.stamp = ros::Time(0);// 获取最新的坐标变换
    point_cam.point.x = odom_msg.pose.pose.position.x;
    point_cam.point.y = odom_msg.pose.pose.position.y;
    point_cam.point.z = odom_msg.pose.pose.position.z;
// 进行坐标变换
    geometry_msgs::PointStamped point_robot;
    try
    {
      geometry_msgs::TransformStamped transformStamped = tfBuffer.lookupTransform("base_link", "camera_link", ros::Time(0));
      tf2::doTransform(point_cam, point_robot, transformStamped);
    }
    catch (tf2::TransformException& ex)
    {
      ROS_WARN("Failed to transform point from camera frame to robot frame: %s", ex.what());
      continue;
    }
    point_robot.point.x += rand() % 5;
    point_robot.point.y += rand() % 5;
// 发布转换后的点
    pub.publish(point_robot);
    ROS_INFO("Point in robot frame: (%.3f, %.3f, %.3f)", point_robot.point.x, point_robot.point.y, point_robot.point.z);
    ros::spinOnce();
    loop_rate.sleep();
  }
  return 0;
}
